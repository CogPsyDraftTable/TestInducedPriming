# Memory <- matrix(0, N_study, N_features)
#  for (i in 1:N_study) {
#    for (j in 1:N_features) {
#      if (runif(1, 0, 1) < L) Memory[i,j] <- Positives[i,j]
#    }
#  }
#Store positives to memory ALTERNATIVE APPROACH
#Create matrix of 1s and 0s corresponding to L, multiply with Memory matrix
#R's matrix multiplication using the * between matrices computes the Hadamard product
#which is just cell by cell straight multiplication
# LSampleMatrix<-matrix(runif(N_features*N_study,0,1),nrow=N_study,byrow=T)
#  LSampleMatrix[LSampleMatrix>=L]<-0 #use logical indexing to convert values to 0s and 1s
#  LSampleMatrix[LSampleMatrix!=0]<-1
#  Memory<-Positives*LSampleMatrix # multiply matrices together
#Store positives to memory ALTERNATIVE APPROACH #2 - one line using binominal distribution
Memory<-Positives*(matrix(rbinom(N_features*N_study,1,L),nrow=N_study,byrow=T))
# Test recognition of positives
#Probe <- matrix(0, N_features) <- Uneccessary to decalre Probe as a matrix
# for (i in 1:N_study) {
#  Probe <- Positives[i,]
#  Intensity <- 0
#  for (j in 1:N_study) {
#    Intensity <- Intensity + cosine(Probe, Memory[j,])^Tau
#  }
#  Positive_familiarities[k,i] <- Intensity
#}
#Alternative for testing recognition of positives
for (i in 1:N_study){
Positive_familiarities[k,i]<-sum((cosine(t(rbind(Memory,Positives[i,])))^Tau)[N_study+1,1:N_study])
}
# Test recognition of negatives
#Probe <- matrix(0, N_features)
#for (i in 1:N_study) {
#  Probe <- Negatives[i,]
#  Intensity <- 0
#  for (j in 1:N_study) {
#    Intensity <- Intensity + cosine(Probe, Memory[j,])^Tau
#  }
#  Negative_familiarities[k,i] <- Intensity
#}
#Alternative for testing recognition of positives
for (i in 1:N_study){
Negative_familiarities[k,i]<-sum((cosine(t(rbind(Memory,Negatives[i,])))^Tau)[N_study+1,1:N_study])
}
}
for (i in 1:N_subjects) {
Kriterion = median(c(Positive_familiarities[i,], Negative_familiarities[i,]))
Hit_rates[i] = sum(Positive_familiarities[i,] > Kriterion) / N_study
FA_rates[i] = sum(Negative_familiarities[i,] > Kriterion) / N_study
}
Kriterion
HitRates
Hit_Rates
Hit_rates
FA_rates
median(Positive_familiarities)
median(Positive_familiarities,byrow=T)
sweep(Positive_familiarities,median)
sweep(Positive_familiarities,1,median)
sweep(Positive_familiarities,2,median)
sweep(as.array(Positive_familiarities),1,median)
sweep(as.array(Positive_familiarities),1:20,median)
sweep(as.array(Positive_familiarities),1:50,median)
sweep(as.array(Positive_familiarities),1:10,median)
sweep(Positive_familiarities,1:10,apply(A,1:10,median))
sweep(Positive_familiarities,1:10,apply(Positive_familiarities,1:10,median))
apply(Positive_familiarities,1,median)
Kriterions<-apply(rbind(Positive_familiarities,Negative_familiarities),1,median)
Kriterions
rbind(Positive_familiarities,Negative_familiarities)
Positive_familiarities
Kriterions<-apply(cbind(Positive_familiarities,Negative_familiarities),1,median)
Kriterions
Positive_familiarities[Positive_familiarities>Kriterions,]
Positive_familiarities[Positive_familiarities>Kriterions]
Hit_rates<-lapply(1:length(Kriterions), function(x) Positive_familiarities[Kriterions[x] > Positive_familiarities[,x],x])
Hit_rates
Hit_rates<-lapply(1:length(Kriterions), function(x) sum(Positive_familiarities[Kriterions[x] > Positive_familiarities[,x],x])/N_study)
Hit_rates
i=1
Kriterion = median(c(Positive_familiarities[i,], Negative_familiarities[i,]))
Kriterion
Kriterions<-apply(cbind(Positive_familiarities,Negative_familiarities),1,median)
Kriterions
Hit_rates[i] = sum(Positive_familiarities[i,] > Kriterion) / N_study
Hit_rates
Hit_rates<-lapply(1:length(Kriterions), function(x) sum(Positive_familiarities[Kriterions[x] > Positive_familiarities[,x],x])/N_study)
Hit_rates
Hit_rates<-lapply(1:length(Kriterions), function(x) sum(Positive_familiarities[Kriterions[x] > Positive_familiarities[x,]x,])/N_study)
Hit_rates<-lapply(1:length(Kriterions), function(x) sum(Positive_familiarities[Kriterions[x] > Positive_familiarities[x,],x])/N_study)
Hit_rates<-lapply(1:length(Kriterions), function(x) sum(Positive_familiarities[Positive_familiarities[,x],x]> Kriterions[x] )/N_study)
HIt_rates
Hit_rates
Hit_rates<-lapply(1:length(Kriterions), function(x) sum(Positive_familiarities[Positive_familiarities[x,]> Kriterions[x]] )/N_study)
Hit_rates
Hit_rates<-lapply(1:length(Kriterions), function(x) sum(Positive_familiarities[Positive_familiarities[x,]> Kriterions[x]] /N_study))
Hit_rates
N_study
Hit_rates<-lapply(1:length(Kriterions), function(x) {sum(Positive_familiarities[Positive_familiarities[x,]> Kriterions[x]]) /N_study})
Hit_rats
Hit_rates
5.77/5
5.77/50
Kriterions<-apply(cbind(Positive_familiarities,Negative_familiarities),1,median)
Hit_rates<-lapply(1:length(Kriterions), function(x) {sum(Positive_familiarities[Positive_familiarities[x,]< Kriterions[x]]) /N_study})
Hit_rates
mapply(function(Positive_familiarities,Kriterions) Positive_familiarities>max(Kriterions),Positive_familiarities,Kriterions)
mapply(function(Positive_familiarities,Kriterions) sum(Positive_familiarities>max(Kriterions))/N_study,Positive_familiarities,Kriterions)
mapply(function(Positive_familiarities,Kriterions) sum(Positive_familiarities>max(Kriterions))/N_study,as.data.frame(Positive_familiarities),as.data.frame(Kriterions))
mapply(function(Positive_familiarities,Kriterions) sum(Kriterions>max(Positive_familiarities))/N_study,as.data.frame(Positive_familiarities),as.data.frame(Kriterions))
mapply(function(Kriterions,Positive_familiarities,) sum(Kriterions>max(Positive_familiarities))/N_study,as.data.frame(Kriterions),as.data.frame(Positive_familiarities))
mapply(function(Kriterions,Positive_familiarities) sum(Kriterions>max(Positive_familiarities))/N_study,as.data.frame(Kriterions),as.data.frame(Positive_familiarities))
Positive_familiarities
Positive_familiarities>Kriterions[rep(1,10),]
Positive_familiarities>Kriterions[rep(1,10,),]
Kriterions[rep(1,10,),]
Kriterions[rep(1,10),]
Kriterions[rep(1,10)]
Kriterions[rep(1,50,),]
Kriterions[rep(1,50,10),]
Kriterions[rep(1,50),]
Kriterions[rep(1,50,),]
Kriterions[rep(1,50,)]
as.matrix(Kriterions)[rep(1,10,),]
as.matrix(Kriterions,nrow=1)[rep(1,10,),]
as.matrix(Kriterions,nrow=1)[rep(1,50,),]
as.matrix(Kriterions,nrow=1)[rep(1,10,),]
Kriterions
rep(Kriterions,each=50)
matrix(rep(Kriterions,each=50),nrow=10,nyrow=true)
matrix(rep(Kriterions,each=50),nrow=10,byrow=true)
matrix(rep(Kriterions,each=50),nrows=10,byrow=true)
matrix(rep(Kriterions,each=50),nrow=10,byrow=true)
matrix(rep(Kriterions,each=50),nrow=10,byrow=T)
Positive_familiarities>matrix(rep(Kriterions,each=50),nrow=10,byrow=T)
View(Positive_familiarities)
Positive_familiarities[Positive_familiarities>matrix(rep(Kriterions,each=50),nrow=10,byrow=T)]
Positive_familiarities[Positive_familiarities>matrix(rep(Kriterions,each=50),nrow=10,byrow=T),]
sum(Positive_familiarities[Positive_familiarities>matrix(rep(Kriterions,each=50),nrow=10,byrow=T)])
sum(Positive_familiarities[Positive_familiarities==Positive_familiarities>matrix(rep(Kriterions,each=50),nrow=10,byrow=T)])
Positive_familiarities[Positive_familiarities>matrix(rep(Kriterions,each=50),nrow=10,byrow=T),]
Positive_familiarities[Positive_familiarities>matrix(rep(Kriterions,each=50),nrow=10,byrow=T)]
Positive_familiarities[,Positive_familiarities>matrix(rep(Kriterions,each=50),nrow=10,byrow=T)]
Positive_familiarities[Positive_familiarities[,]>matrix(rep(Kriterions,each=50),nrow=10,byrow=T)]
# Compute discrimination summary statistics
for (i in 1:N_subjects) {
Kriterion = median(c(Positive_familiarities[i,], Negative_familiarities[i,]))
Hit_rates[i] = sum(Positive_familiarities[i,] > Kriterion) / N_study
FA_rates[i] = sum(Negative_familiarities[i,] > Kriterion) / N_study
}
hist(Negative_familiarities, xlim=c(-2,3), ylim = c(0,N_subjects*N_study/2), xlab="Familiarity", ylab="Frequency", main="", border="DarkGrey", col="Grey")
par(new=TRUE)
hist(Positive_familiarities, xlim=c(-2,3), ylim = c(0,N_subjects*N_study/2), xlab="", ylab="", main="", border="black")
text(x=-1, y=N_subjects*N_study/2.5, paste("M(H-FA) = ", round(mean(Hit_rates-FA_rates),2), "\n SD(H-FA) = ", round(sd(Hit_rates-FA_rates),2)))
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
melt(Negative_familiarities)
melt(Negative_familiarities,value.name=c("subject","Familiarity"))
hist(Positive_familiarities, xlim=c(-2,3), ylim = c(0,N_subjects*N_study/2), xlab="", ylab="", main="", border="black")
text(x=-1, y=N_subjects*N_study/2.5, paste("M(H-FA) = ", round(mean(Hit_rates-FA_rates),2), "\n SD(H-FA) = ", round(sd(Hit_rates-FA_rates),2)))
text(x=-1, y=N_subjects*N_study/2.5, paste("M(H-FA) = ", round(mean(Hit_rates-FA_rates),2), "\n SD(H-FA) = ", round(sd(Hit_rates-FA_rates),2)))
NF<-melt(Negative_familiarities)
PF<-melt(Positive_familiarities)
AllData<-data.frame(rbind(NF,PF),rep(c("Negative","Positive"),each=N_subjects))
AllData
View(AllData)
AllData<-data.frame(rbind(NF,PF),Familiarity=rep(c("Negative","Positive"),each=N_subjects))
names(AllData)<-c("Subject","Item","Intensity","Familiarity")
View(AllData)
gplot(AllData, aes(Intensity, fill = Familiarity)) +
geom_density(alpha = 0.2)
library(ggplot2)
ggplot(AllData, aes(Intensity, fill = Familiarity)) +
geom_density(alpha = 0.2)
ggplot(AllData, aes(Intensity~Familiarity, fill = Familiarity)) +
geom_density(alpha = 0.2)
ggplot(AllData, aes(Intensity, fill = Familiarity)) +
geom_histogram(alpha = 0.2)
ggplot(AllData, aes(Intensity, fill = Familiarity)) +
geom_histogram(alpha = 0.2, dodge=T)
ggplot(AllData, aes(Intensity, fill = Familiarity)) +
geom_histogram(alpha = 0.2, position="dodge")
hist(Negative_familiarities, xlim=c(-2,3), ylim = c(0,N_subjects*N_study/2), xlab="Familiarity", ylab="Frequency", main="", border="DarkGrey", col="Grey")
par(new=TRUE)
hist(Positive_familiarities, xlim=c(-2,3), ylim = c(0,N_subjects*N_study/2), xlab="", ylab="", main="", border="black")
ggplot(AllData, aes(Intensity, fill = Familiarity,group=Familiarity)) +
geom_histogram(alpha = 0.2, position="dodge")
ggplot(AllData, aes(Intensity, color = Familiarity,group=Familiarity)) +
geom_histogram(alpha = 0.2, position="dodge")
ggplot(AllData, aes(Intensity, color = Familiarity,group=Familiarity)) +
geom_histogram(alpha = 0.2, position="dodge")+facet_wrap(Intensity~Familiarity)
AllData
NF<-melt(Negative_familiarities)
PF<-melt(Positive_familiarities)
AllData<-data.frame(rbind(NF,PF),Familiarity=rep(c("Negative","Positive"),each=N_subjects*N_study))
names(AllData)<-c("Subject","Item","Intensity","Familiarity")
ggplot(AllData, aes(Intensity, color = Familiarity,group=Familiarity)) +
geom_histogram(alpha = 0.2, position="dodge")
ggplot(AllData, aes(Intensity, color = Familiarity,group=Familiarity)) +
geom_histogram(alpha = 0.2)
ggplot(AllData, aes(Intensity, color = Familiarity)) +
geom_histogram(alpha = 0.2)
ggplot(AllData, aes(Intensity, color = Familiarity)) +
geom_histogram(alpha = 0.2, position="dodge")
ggplot(AllData, aes(Intensity, color = Familiarity)) +
geom_histogram(alpha = 0.2, position="dodge")+theme("classic")
ggplot(AllData, aes(Intensity, color = Familiarity)) +
geom_histogram(alpha = 0.2, position="dodge")+theme(classic)
ggplot(AllData, aes(Intensity, color = Familiarity)) +
geom_histogram(alpha = 0.2, position="dodge")+theme_classic(base_size=15)
ggplot(AllData, aes(Intensity, fill = Familiarity, group=Familiarity)) +
geom_histogram(alpha = 0.2, position="dodge")+theme_classic(base_size=15)
ggplot(AllData, aes(Intensity, fill = Familiarity, group=Familiarity)) +
geom_histogram(alpha = 0.8, position="dodge")+theme_classic(base_size=15)
ggplot(AllData, aes(Intensity, fill = Familiarity, group=Familiarity)) +
geom_histogram(alpha = 0.8, position="dodge")+theme_classic(base_size=15)+facet_wrap(~Subject)
N_features <- 20
N_study <- 50
L <- 0.75
Tau <- 3
Features <- c(1, 0, -1)
Positive_familiarities<-c()
#my shorthand for getting Matrix of Probes
Positives<-matrix(sample(Features,N_features*N_study,replace=T),nrow=N_study,byrow=T)
Negatives<-matrix(sample(Features,N_features*N_study,replace=T),nrow=N_study,byrow=T)
#my shorthand for generating Memory Matrix
Memory<-Positives*(matrix(rbinom(N_features*N_study,1,L),nrow=N_study,byrow=T))
Probe <- matrix(0, N_features) <- Uneccessary to declare Probe as a matrix
for (i in 1:N_study) {
Probe <- Positives[i,]
Intensity <- 0
for (j in 1:N_study) {
Intensity <- Intensity + cosine(Probe, Memory[j,])^Tau
}
Positive_familiarities <- c(Positive_familiarities,Intensity)
}
print(Positive_familiarities)
EchoMemoryMatrix<-matrix()
j=1
EchoMemoryMatrix[j,]<-rbind(EchoMemoryMatrix,Intensity*Memory[j,])
Intensity <- cosine(Probe, Memory[j,])^Tau
Intensity
EchoMemoryMatrix[j,]<-rbind(EchoMemoryMatrix,as.numeric(Intensity)*Memory[j,])
as.numeric(Intensity)
EchoMemoryMatrix<-matrix(0)
EchoMemoryMatrix[j,]<-rbind(EchoMemoryMatrix,as.numeric(Intensity)*Memory[j,])
EchoMemoryMatrix<-matrix(NA,ncol=50)
EchoMemoryMatrix<-matrix(0,ncol=50)
EchoMemoryMatrix[j,]<-rbind(EchoMemoryMatrix,as.numeric(Intensity)*Memory[j,])
EchoMemoryMatrix
as.numeric(Intensity)*Memory[j,]
Memory[1,]
EchoMemoryMatrix<-matrix(0,ncol=20)
EchoMemoryMatrix[j,]<-rbind(EchoMemoryMatrix,as.numeric(Intensity)*Memory[j,])
as.numeric(Intensity)*Memory[j,]
EchoMemoryMatrix<-matrix(0,ncol=20,nrow=50)
EchoMemoryMatrix[j,]<-as.numeric(Intensity)*Memory[j,]
EchoMemoryMatrix
i=1
Probe <- Positives[i,]
EchoMemoryMatrix<-matrix(0,ncol=20,nrow=50)
for (j in 1:N_study) {
Intensity <- cosine(Probe, Memory[j,])^Tau
EchoMemoryMatrix[j,]<-as.numeric(Intensity)*Memory[j,]
}
EchoMemoryMatrix
colsum(EchoMemoryMatrix)
colSums(EchoMemoryMatrix)
for (i in 1:N_study) {
Probe <- Positives[i,]
EchoMemoryMatrix<-matrix(0,ncol=20,nrow=50)
for (j in 1:N_study) {
Intensity <- cosine(Probe, Memory[j,])^Tau
EchoMemoryMatrix[j,]<-as.numeric(Intensity)*Memory[j,]
}
Positive_familiarities[k,i] <- cosine(colSums(EchoMemoryMatrix),Probe)^Tau
}
print(Positive_familiarities)
Probe <- Positives[i,]
EchoMemoryMatrix
EchoMemoryMatrix
colSums(EchoMemoryMatrix)
cosine(colSums(EchoMemoryMatrix),Probe)
require(lsa)
#Declare initial variables
N_features <- 20
N_study <- 50
L <- 0.75
Tau <- 3
Features <- c(1, 0, -1)
Positive_familiarities<-c()
#my shorthand for getting Matrix of Probes
Positives<-matrix(sample(Features,N_features*N_study,replace=T),nrow=N_study,byrow=T)
Negatives<-matrix(sample(Features,N_features*N_study,replace=T),nrow=N_study,byrow=T)
#my shorthand for generating Memory Matrix
Memory<-Positives*(matrix(rbinom(N_features*N_study,1,L),nrow=N_study,byrow=T))
for (i in 1:N_study) {
Probe <- Positives[i,]
Intensity <- 0
for (j in 1:N_study) {
Intensity <- Intensity + cosine(Probe, Memory[j,])^Tau
}
Positive_familiarities <- c(Positive_familiarities,Intensity)
}
print(Positive_familiarities)
Positive_familiaritiesB<-c()
Positive_familiaritiesC<-c()
for (i in 1:N_study) {
Probe <- Positives[i,]
EchoMemoryMatrix<-matrix(0,ncol=20,nrow=50)
for (j in 1:N_study) {
Intensity <- cosine(Probe, Memory[j,])^Tau
EchoMemoryMatrix[j,]<-as.numeric(Intensity)*Memory[j,]
}
Positive_familiaritiesB <- c(Positive_familiaritiesB,cosine(colSums(EchoMemoryMatrix),Probe)^Tau)
Positive_familiaritiesC <- c(Positive_familiaritiesC,cor(colSums(EchoMemoryMatrix),Probe))
}
#This one gives final similarities between reconstructed echo and probe using cosine^tau
print(Positive_familiaritiesB)
cor(Positive_familiarities,Positive_familiaritiesB)
#This one gives final similarities between reconstructed echo and probe using correlation coefficient
print(Positive_familiaritiesC)
cor(Positive_familiarities,Positive_familiaritiesC)
cosine(colSums(EchoMemoryMatrix),Probe)
cosine(colSums(EchoMemoryMatrix),Probe)^Tau
a=1
b<-runif(1,1,6)
vector<-c(1,2,3,4,55)
fix(vector)
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
1+1
2*3
(1+2+3)/3
a<-3
b<-4
c<-a+b
print(c)
a<-c()
for(i in seq(1,100)){
a[i]<-i
}
print(a)
x<-seq(1,100)
x
x<-seq(1,100)
for(i in x){
if(x[i]%%3 ==0){
x[i]<-"fizz"
}
}
x
x<-seq(1,100)
x
x[3]<-"fizz"
x
x<-seq(1,100)
FizzBuzzList<-c()
for(i in x){
if(x[i]%%3 ==0){
FizzBuzzList[i]<-"fizz"
}
}
FizzBuzzList
x<-seq(1,100)
FizzBuzzList<-c()
for(i in x){
if(x[i]%%3 ==0){
FizzBuzzList[i]<-"fizz"
}else{
FizzBuzzList[i]<-i
}
}
FizzBuzzList
x<-seq(1,100)
x
sum(x)
sum()
sum
seq
for(i in 1:100){
print(i)
}
y<-c()
for(i in 1:100){
y<-y+i
}
y
y
y<-c()
i
class(i)
y<-y+i
y
y<-integer()
y<-y+i
y
i
y
y<-integer()
for(i in 1:100){
y+i
}
y<-integer()
for(i in 1:100){
print(y+i)
}
y<-c()
for(i in 1:100){
print(y+i)
}
y<-c()
for(i in 1:100){
print(i)
}
i
i[1]
i+1
y=1
i+y
y
y<-c()
y
y+i
y<-0
for(i in 1:100){
y<-y+i
}
y
y<-c()
class(y)
y<-numeric()
y
class(y)
y[1]<-1
y
y<-numeric()
i
y+i
y
x<-seq(1,100)
x
sum(x)
w<-0
for(i in 1:100){
w<-w+i
}
w
MyAddOne<-function(x){
return(x+1)
}
MyAddOne(7)
MyAddOne(100)
AddTwoNums<-function(a,b){
return(a+b)
}
AddTwoNums(100,23)
MySum<-function(VectorOfNumbers){
CurrentSum<-0
for(i in VectorOfNumbers){
CurrentSum<-CurrentSum+i
}
return(CurrentSum)
}
MySum(3)
MySum(c(1,2,3))
MySum(seq(1,100))
StartingNumber=5
StoppingNumber=10
RangeOfNumbers<-c()
for(i in StartingNumber:StoppingNumber){
RangeOfNumbers<-c(RangeOfNumbers,i)
}
RangeOfNumbers
SumBetweenRange<-function(StartingNumber,StoppingNumber){
#generate the range of numbers
# could simply use the seq(StartingNumber,StoppingNumber)
RangeOfNumbers<-c()
for(i in StartingNumber:StoppingNumber){
RangeOfNumbers<-c(RangeOfNumbers,i)
}
return(MySum(RangeOfNumbers))
}
SumBetweenRange(50,100)
SumBetweenRange(500,1000)
sum(seq(50,100))
sum(seq(500,1000))
a<-c()
a[1]<-10
a[2]<-14
a
a<-c()
a
a<-a+1
a
a<-numeric()
a
a<-c()
a
a+1
a<-numeric()
a+1
a<-0
a+1
setwd("~/Dropbox/DraftTable/Projects/TestInducedPriming/Data")
setwd("~/Dropbox/DraftTable/Projects/TestInducedPriming/Data")
subnum=5
test<-scan(file="RawTurkData.txt", what = "character", sep = " ", skip=(0+subnum), nlines=1)
test
data<-unlist(strsplit(test,split=":"))
data
subnum=6
test<-scan(file="RawTurkData.txt", what = "character", sep = " ", skip=(0+subnum), nlines=1)
data
